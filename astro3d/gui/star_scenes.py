"""This module contains several subclasses of ``QGraphicsScene``.
These are instantiated by `~astro3d.gui.astroVisual.MainPanel` and
are used to display the image and any regions.
Furthermore, `RegionStarScene` and `ClusterStarScene` allow
user input upon mouse click.

"""
from __future__ import division, print_function

# STDLIB
from collections import defaultdict

# Anaconda
from PyQt4.QtGui import *
from PyQt4.QtCore import *


class StarScene(QGraphicsScene):
    """This is a non-interactive subclass of ``QGraphicsScene``.
    It will display the image and any regions that have been added.

    Parameters
    ----------
    parent : `~astro3d.gui.astroVisual.MainPanel`
        The instantiating class.

    width, height : int
        The size of the `~astro3d.gui.astroVisual.MainPanel`,
        which allows `StarScene` to scale the image appropriately.

    Attributes
    ----------
    size : QSize
        Size of the `~astro3d.gui.astroVisual.MainPanel`.

    regions : dict
        Contains region type and a list of ``QGraphicsPolygonItem`` regions, which provides `StarScene` with a pointer to each region, allowing them to be removed if necessary. ``Region.name`` must contain region type.

    """
    def __init__(self, parent, width, height):
        super(StarScene, self).__init__(parent)
        self.size = QSize(width, height)
        self.regions = defaultdict(list)

    def addImg(self, pixmap):
        """Scales the input pixmap to appropriate size for the
        `~astro3d.gui.astroVisual.MainPanel`, then adds it to
        the display. Adds all regions on top of image.

        .. note::

            Returns the scaled pixmap to save so that scaling will be
            unnecessary in the future.

        Parameters
        ----------
        pixmap : QPixmap

        Returns
        -------
        scaledPixmap : QPixmap

        """
        self.clear()
        scaledPixmap = pixmap.scaled(self.size, Qt.KeepAspectRatio)
        self.addItem(QGraphicsPixmapItem(scaledPixmap))
        for reglist in self.regions.itervalues():
            for reg in reglist:
                self.addItem(reg)
        return scaledPixmap

    def addReg(self, region):
        """Adds a given region to the display.

        .. note::

            The recursive behavior is for ``MergedRegion``,
            which is not currently supported.

        Parameters
        ----------
        region : `~astro3d.gui.astroObjects.Region`

        """
        if isinstance(region.region, (list, tuple)):
            return map(self.addReg, region.region)
        else:
            r = QGraphicsPolygonItem(region.region)
            r.setPen(QColor(0, 100, 200))
            self.addItem(r)
            self.regions[region.name].append(r)

    def delReg(self, region):
        """Remove a given region from the display.

        .. note::

            The recursive behavior is for ``MergedRegion``,
            which is not currently supported.

        Parameters
        ----------
        region : `~astro3d.gui.astroObjects.Region`

        """
        if isinstance(region.region, (list, tuple)):
            map(self.delReg, region.region)
        else:
            r = QGraphicsPolygonItem(region.region)
            self.removeItem(r)
            self.regions[region.name].remove(r)

    def clear(self):
        """Removes all items from the display without destroying
        instance variables.

        """
        for i in self.items():
            self.removeItem(i)


class RegionStarScene(QGraphicsScene):
    """This is an interactive subclass of ``QGraphicsScene``.
    Every time the user clicks on the image, it generates a point
    and adds it to a ``QPolygon``, allowing it to display that
    polygon as a region.

    Parameters
    ----------
    parent : `~astro3d.gui.astroVisual.MainPanel`
        The instantiating class.

    pixmap : QPixmap
        The scaled QPixmap generated by :meth:`StarScene.addImg`.
        It is added so that `RegionStarScene` can display the image.

    name : str
        Name (type) of the region to be drawn.

    Attributes
    ----------
    name : str
        Same as input.

    item : QGraphicsPixmapItem
        Created from ``pixmap``.

    points : list
        Points that have been added by the user.

    shape : QPolygonF
        Polygon created from ``points``.

    display_shape : QGraphicsPolygonItem
        Display version of ``shape``.

    """
    def __init__(self, parent, pixmap, name):
        super(RegionStarScene, self).__init__(parent)
        self.name = name
        self.item = QGraphicsPixmapItem(pixmap)
        self.addItem(self.item)
        self.points = []
        self.shape = None
        self.display_shape = None

    def mousePressEvent(self, event):
        """This method is called whenever the user clicks on
        `RegionStarScene`. It adds the point clicked to ``points``
        and (if 3 or more points are added) it generates
        ``shape`` and ``display_shape`` to go along with it.

        Parameters
        ----------
        event : QEvent

        """
        p = event.scenePos()
        self.points.append(p)
        e = QGraphicsEllipseItem(p.x()-5, p.y()-5, 10, 10)
        e.setPen(QPen(QColor(0, 255, 0)))
        self.addItem(e)
        if len(self.points) >= 3:
            self.shape = QPolygonF(self.points)
            if self.display_shape is not None:
                self.removeItem(self.display_shape)
            self.display_shape = QGraphicsPolygonItem(self.shape)
            self.display_shape.setPen(QPen(QColor(0, 100, 200)))
            self.addItem(self.display_shape)

    def getRegion(self):
        """Returns the name (String) and shape (QPolygonF) of the region."""
        return self.name, self.shape

    def clear(self):
        """Removes all items from the display except the image.
        Resets all instance variables except for ``item``.

        """
        for i in self.items():
            self.removeItem(i)
        self.addItem(self.item)
        self.points = []
        self.shape = None
        self.display_shape = None


class RegionFileScene(QGraphicsScene):
    """Like `RegionStarScene` but the regions are pre-loaded from files."""
    def __init__(self, parent, pixmap, regions):
        super(RegionFileScene, self).__init__(parent)
        self.item = QGraphicsPixmapItem(pixmap)
        self.addItem(self.item)

        if isinstance(regions, list):
            self.name = [reg.name for reg in regions]
            self.shape = [reg.region for reg in regions]
            self.display_shape = []

            for s in self.shape:
                q = QGraphicsPolygonItem(s)
                q.setPen(QPen(QColor(0, 100, 200)))
                self.display_shape.append(q)
                self.addItem(q)

        else:
            self.name = regions.name
            self.shape = regions.region
            self.display_shape = QGraphicsPolygonItem(self.shape)
            self.addItem(self.display_shape)

    def getRegion(self):
        """Returns the name (string or list) and shapes (QPolygonF or list)
        of the regions.

        """
        return self.name, self.shape

    def clear(self):
        """Removes all items from the display except the image."""
        for i in self.items():
            self.removeItem(i)
        self.addItem(self.item)


class ClusterStarScene(QGraphicsScene):
    """An interactive subclass of ``QGraphicsScene``.
    Displays the given number of brightest potential star
    clusters using circles to highlight their locations.
    The user may click on these to remove them from consideration.

    .. note::

        There is currently no safe guard against removing
        all the points.

    Parameters
    ----------
    parent : `~astro3d.gui.astroVisual.MainPanel`
        The instantiating class.

    pixmap : QPixmap
        Scaled QPixmap generated by :meth:`StarScene.addImg`.
        It is added so that image can be displayed.

    points : ndarray
        Coordinates denoting the locations of potential star clusters.

    Attributes
    ----------
    points
        Same as input.

    graphicspoints : QGraphicsEllipseItems
        Points displayed on screen.

    toremove
        A list of index values that must be removed from the `astropy.table.Table` that contains the locations of star clusters.

    """
    def __init__(self, parent, pixmap, points):
        super(ClusterStarScene, self).__init__(parent)
        self.points = points
        self.addItem(QGraphicsPixmapItem(pixmap))
        self.graphicspoints = []
        for point in points:
            self.graphicspoints.append(
                QGraphicsEllipseItem(point[0] - 5, point[1] - 5, 10, 10))
            self.graphicspoints[-1].setPen(QPen(QColor(200, 50, 50)))
            self.addItem(self.graphicspoints[-1])
        self.toremove = []

    def mousePressEvent(self, event):
        """This method is called whenever the user clicks
        on the screen. If the click is on one of the displayed
        points, that point is removed from the screen.
        The index value of the point is added to ``toremove``.

        Parameters
        ----------
        event : QEvent

        """
        p = event.scenePos()
        for i, gp in enumerate(self.graphicspoints):
            if gp.contains(p):
                self.removeItem(gp)
                self.toremove.append(i)
                break
